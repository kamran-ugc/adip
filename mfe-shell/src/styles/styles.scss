/* You can add global styles to this file, and also import other style files */
@import "@angular/material/prebuilt-themes/indigo-pink.css";
@import "./color-override.scss";
@import url("https://fonts.googleapis.com/css2?family=Metrophobic&display=swap");
@import url("https://fonts.googleapis.com/icon?family=Material+Icons");
@import "./light_variables.scss";
@import "./typography.scss";

// Mixins
@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media (max-width: 768px) {
      @content;
    }
  }
  @if $breakpoint == md {
    @media (max-width: 992px) {
      @content;
    }
  }
  @if $breakpoint == lg {
    @media (max-width: 1200px) {
      @content;
    }
  }
}

@mixin generate-spacing-classes($property, $prefix, $values) {
  @each $size, $value in $values {
    .#{$prefix}-#{$size} {
      #{$property}: $value !important;
    }

    @include respond-to(sm) {
      .#{$prefix}-sm-#{$size} {
        #{$property}: $value;
      }
    }
  }
}

@mixin generate-font-size-classes($values) {
  @each $size, $value in $values {
    .fs-#{$size} {
      font-size: $value !important;
    }

    @include respond-to(sm) {
      .fs-sm-#{$size} {
        font-size: $value;
      }
    }
  }
}

@mixin generate-font-weight-classes($values) {
  @each $weight, $value in $values {
    .fw-#{$weight} {
      font-weight: $value;
    }

    @include respond-to(sm) {
      .fw-sm-#{$weight} {
        font-weight: $value;
      }
    }
  }
}

@mixin generate-line-height-classes($values) {
  @each $height, $value in $values {
    .lh-#{$height} {
      line-height: $value;
    }

    @include respond-to(sm) {
      .lh-sm-#{$height} {
        line-height: $value;
      }
    }
  }
}

@mixin generate-text-color-classes($color-map) {
  @each $name, $color in $color-map {
    .text-#{$name} {
      color: $color !important;
    }
  }
}

@mixin generate-bg-color-classes($color-map) {
  @each $name, $color in $color-map {
    .bg-#{$name} {
      background-color: $color;
    }
  }
}

// Spacing values
$spacing-values: (
  10: 10px,
  12: 12px,
  16: 16px,
  18: 18px,
  20: 20px,
  24: 24px,
  28: 28px,
  30: 30px,
  32: 32px,
  40: 40px,
);

// Font size values
$font-size-values: (
  6: 0.375rem,
  7: 0.4375rem,
  8: 0.5rem,
  9: 0.5625rem,
  10: 0.625rem,
  11: 0.6875rem,
  12: 0.75rem,
  13: 0.8125rem,
  14: 0.875rem,
  15: 0.9375rem,
  16: 1rem,
  17: 1.0625rem,
  18: 1.125rem,
  19: 1.1875rem,
  20: 1.25rem,
  22: 1.375rem,
  24: 1.5rem,
  26: 1.625rem,
  28: 1.75rem,
  30: 1.875rem,
  32: 2rem,
  34: 2.125rem,
  36: 2.25rem,
);

// Font weight values
$font-weight-values: (
  300: 300,
  400: 400,
  500: 500,
  600: 600,
  700: 700,
);

// Line height values
$line-height-values: (
  100: 100%,
  105: 105%,
  110: 110%,
  115: 115%,
  120: 120%,
  125: 125%,
  130: 130%,
  135: 135%,
  140: 140%,
  145: 145%,
  150: 150%,
  155: 155%,
  160: 160%,
  165: 165%,
  170: 170%,
  175: 175%,
  180: 180%,
);

$theme-colors: (
  // Primary
  "primary": $primary,
  "primary-light-1": $primary-light-1,
  "primary-light-2": $primary-light-2,
  "primary-dark-1": $primary-dark-1,
  "primary-dark-2": $primary-dark-2,

  // Grayscale
  "gray-10": $gray-10,
  "gray-15": $gray-15,
  "gray-20": $gray-20,
  "gray-25": $gray-25,
  "gray-30": $gray-30,
  "gray-35": $gray-35,
  "gray-40": $gray-40,
  "gray-45": $gray-45,
  "gray-50": $gray-50,
  "gray-55": $gray-55,
  "gray-60": $gray-60,
  "gray-65": $gray-65,
  "gray-70": $gray-70,
  "gray-75": $gray-75,
  "gray-80": $gray-80,
  "gray-85": $gray-85,
  "gray-90": $gray-90,
  "gray-91": $gray-91,
  "gray-92": $gray-92,
  "gray-93": $gray-93,
  "gray-94": $gray-94,
  "gray-95": $gray-95,
  "gray-96": $gray-96,
  "gray-97": $gray-97,
  "gray-98": $gray-98,
  "gray-99": $gray-99,
  "gray-100": $gray-100,

  // Orange
  "orange": $orange,
  "orange-light-1": $orange-light-1,
  "orange-light-2": $orange-light-2,
  "orange-dark-1": $orange-dark-1,
  "orange-dark-2": $orange-dark-2,

  // Purple
  "purple": $purple,
  "purple-light-1": $purple-light-1,
  "purple-light-2": $purple-light-2,
  "purple-dark-1": $purple-dark-1,
  "purple-dark-2": $purple-dark-2,

  // Red
  "red": $red,
  "red-light-1": $red-light-1,
  "red-light-2": $red-light-2,
  "red-dark-1": $red-dark-1,
  "red-dark-2": $red-dark-2,

  // Yellow
  "yellow": $yellow,
  "yellow-light-1": $yellow-light-1,
  "yellow-light-2": $yellow-light-2,
  "yellow-dark-1": $yellow-dark-1,
  "yellow-dark-2": $yellow-dark-2,

  // Green
  "green": $green,
  "green-light-1": $green-light-1,
  "green-light-2": $green-light-2,
  "green-dark-1": $green-dark-1,
  "green-dark-2": $green-dark-2,

  // Teal Blue
  "teal-blue": $teal-blue,
  "teal-blue-light-1": $teal-blue-light-1,
  "teal-blue-light-2": $teal-blue-light-2,
  "teal-blue-dark-1": $teal-blue-dark-1,
  "teal-blue-dark-2": $teal-blue-dark-2,

  // Pink
  "pink": $pink,
  "pink-light-1": $pink-light-1,
  "pink-light-2": $pink-light-2,
  "pink-dark-1": $pink-dark-1,
  "pink-dark-2": $pink-dark-2,

  // Bronze
  "bronze": $bronze,
  "bronze-light-1": $bronze-light-1,
  "bronze-light-2": $bronze-light-2,
  "bronze-dark-1": $bronze-dark-1,
  "bronze-dark-2": $bronze-dark-2,

  // Tiffany
  "tiffany": $tiffany,
  "tiffany-light-1": $tiffany-light-1,
  "tiffany-light-2": $tiffany-light-2,
  "tiffany-dark-1": $tiffany-dark-1,
  "tiffany-dark-2": $tiffany-dark-2,

  // Black/White
  "white": $white,
  "black": $black
);

// Generate margin classes
@include generate-spacing-classes(margin, "m", $spacing-values);
@include generate-spacing-classes(margin-top, "mt", $spacing-values);
@include generate-spacing-classes(margin-bottom, "mb", $spacing-values);
@include generate-spacing-classes(margin-left, "ms", $spacing-values);
@include generate-spacing-classes(margin-right, "me", $spacing-values);

// Generate padding classes
@include generate-spacing-classes(padding, "p", $spacing-values);
@include generate-spacing-classes(padding-top, "pt", $spacing-values);
@include generate-spacing-classes(padding-bottom, "pb", $spacing-values);
@include generate-spacing-classes(padding-left, "pl", $spacing-values);
@include generate-spacing-classes(padding-right, "pr", $spacing-values);

// Generate font size classes
@include generate-font-size-classes($font-size-values);

// Generate font weight classes
@include generate-font-weight-classes($font-weight-values);

// Generate line height classes
@include generate-line-height-classes($line-height-values);

// Generate text color classes
@include generate-text-color-classes($theme-colors);

// Generate background color classes
@include generate-bg-color-classes($theme-colors);

html,
body {
  height: 100%;
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  background: #f6f6f6;
}

// Material theme customization
.mat-mdc-form-field {
  .mat-mdc-form-field-flex {
    //background-color: #f5f5f5;
  }
}

.mat-mdc-menu-panel {
  max-width: none !important;
}

.cursor-pointer {
  cursor: pointer !important;
}

.dialog-header {
  padding: 20px 25px;
  border-bottom: 2px solid var(--gray-94, #ebecf0);
  background: var(--gray-98, #f7f8fa);
}

.mat-mdc-input-element {
  &::placeholder {
    color: var(--gray-80, #adb8cc) !important;
    opacity: 1;
  }
}

// .mat-mdc-form-field {
//   line-height: 45px; // Match the height

//   .mat-mdc-text-field-wrapper {
//     height: 45px;
//   }

//   .mat-mdc-form-field-flex {
//     height: 100%;
//   }

//   .mat-mdc-form-field-infix {
//     min-height: 45px;
//     height: 45px;
//     padding: 10px 0 !important;
//   }

//   .mat-mdc-text-field-wrapper
//     .mat-mdc-form-field-flex
//     .mat-mdc-floating-label:not(.mdc-floating-label--float-above) {
//     top: 50%;
//   }
// }
